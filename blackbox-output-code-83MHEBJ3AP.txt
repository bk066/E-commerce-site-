const db = require('../config/db');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

const JWT_SECRET = 'your_jwt_secret_key'; // Replace with env variable in production

exports.register = (req, res) => {
  const { name, email, password, contact, address, city, pin } = req.body;

  if (!name || !email || !password || !contact || !address || !city || !pin) {
    return res.status(400).json({ error: 'All fields are required' });
  }

  // Hash password
  bcrypt.hash(password, 10, (err, hash) => {
    if (err) return res.status(500).json({ error: 'Error hashing password' });

    const sql = `INSERT INTO Users (name, email, password_hash, contact, address, city, pin)
                 VALUES (?, ?, ?, ?, ?, ?, ?)`;
    const params = [name, email, hash, contact, address, city, pin];

    db.run(sql, params, function (err) {
      if (err) {
        if (err.message.includes('UNIQUE constraint failed')) {
          return res.status(400).json({ error: 'Email already registered' });
        }
        return res.status(500).json({ error: err.message });
      }
      res.status(201).json({ message: 'User  registered successfully', userId: this.lastID });
    });
  });
};

exports.login = (req, res) => {
  const { email, password } = req.body;

  if (!email || !password) return res.status(400).json({ error: 'Email and password required' });

  const sql = 'SELECT * FROM Users WHERE email = ?';
  db.get(sql, [email], (err, user) => {
    if (err) return res.status(500).json({ error: err.message });
    if (!user) return res.status(400).json({ error: 'Invalid email or password' });

    bcrypt.compare(password, user.password_hash, (err, result) => {
      if (err) return res.status(500).json({ error: 'Error comparing passwords' });
      if (!result) return res.status(400).json({ error: 'Invalid email or password' });

      // Generate JWT
      const token = jwt.sign({ id: user.id, email: user.email }, JWT_SECRET, { expiresIn: '1h' });
      res.json({ message: 'Login successful', token });
    });
  });
};